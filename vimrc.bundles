"------------------------------------------- begin of configs --------------------------------------------

" ################### 包依赖 #####################
" package dependence:  ctags, ag(he_silver_searcher)
" python dependence:   pep8, pyflake

" 非兼容vi模式。去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限
set nocompatible
filetype off " required! turn off

" ################### 插件管理 ###################
" inspired by spf13, 自定义需要的插件集合
if !exists('g:bundle_groups')
    let g:bundle_groups=['python', 'markdown', 'html', 'css', 'golang']
endif

" ----------------------------------------------------------------------------
" 使用 vim-plug 管理插件
" vim plugin bundle control, command model
" ----------------------------------------------------------------------------

call plug#begin('~/.vim/bundle')

" 移动光标到插件名上, 使用'#'快速跳转到每个插件的配置处

" syntastic
if v:version < 800
    Plug 'scrooloose/syntastic'
else
    Plug 'dense-analysis/ale'
endif

" 自动补全单引号，双引号等
Plug 'Raimondi/delimitMate'

" quick edit
" 快速注释
Plug 'preservim/nerdcommenter'
" [count]<leader>cc
" [count]<leader>cu

" 快速加入修改环绕字符
Plug 'tpope/vim-surround'

" 使用
" 删除": ds"
" 替换: cs"' # change surrounding
" 添加: csw" # cs word
" 添加-整行: yss" #you surround

Plug 'kshenoy/vim-signature'

" git
Plug 'tpope/vim-fugitive'

" view
" 状态栏增强展示
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" 括号显示增强
Plug 'kien/rainbow_parentheses.vim'
Plug 'altercation/vim-colors-solarized'

" file navigation
" nerdtree nerdtreetabs
Plug 'scrooloose/nerdtree' | Plug 'jistr/vim-nerdtree-tabs'

Plug 'majutsushi/tagbar'

Plug 'CoderCookE/vim-chatgpt'
    let g:chat_gpt_temperature = 0
    let g:chat_gpt_lang = 'Chinese'
    let g:chat_gpt_split_direction = 'vertical'
    let g:chat_gpt_model = 'gpt-4.1'
    let g:split_ratio = 2
    
Plug 'github/copilot.vim'
    "let g:copilot_proxy_strict_ssl = v:false
    
if count(g:bundle_groups, 'golang')
    " 1. vim a.go
    " 2. :GoInstallBinaries
    " vimgo  https://github.com/fatih/vim-go
    Plug 'fatih/vim-go', {'for': 'go'}
endif


if count(g:bundle_groups, 'python')
    " for python.vim syntax highlight
    Plug 'hdima/python-syntax'
    " use :Yapf to format file
    Plug 'mindriot101/vim-yapf'
    let g:yapf_style = "google"
    " 对import排序
    Plug 'fisadev/vim-isort'
    let g:vim_isort_map = '<C-i>'
endif

if count(g:bundle_groups, 'json')
    Plug 'elzr/vim-json', {'for': 'json'}
endif

let g:mapleader = "\<Space>"
let g:maplocalleader = ","
Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }
" LeaderF {{{
    " usage: https://retzzz.github.io/dc9af5aa/
    let g:Lf_WindowPosition = 'popup'
    let g:Lf_PreviewInPopup = 1
    let g:Lf_WindowHeight = 0.3
    let g:Lf_StlSeparator = { 'left': "\ue0b0", 'right': "\ue0b2", 'font': "DejaVu Sans Mono for Powerline" }
    let g:Lf_PreviewResult = {
        \ 'File': 0,
        \ 'Buffer': 0,
        \ 'Mru': 0,
        \ 'Tag': 0,
        \ 'BufTag': 1,
        \ 'Function': 1,
        \ 'Line': 1,
        \ 'Colorscheme': 0,
        \ 'Rg': 0,
        \ 'Gtags': 0
        \}
    let g:Lf_WorkingDirectoryMode = 'Ac'
    let g:Lf_GtagsSkipUnreadable = 1
    let g:Lf_GtagsExtraOptions = '--result=ctags-mod'  " 使用更严格的输出格式
    let g:Lf_RootMarkers = ['.git', '.svn', '.hg', '.project', '.root']
    let g:Lf_StlColorscheme = 'powerline'
	let g:Lf_WildIgnore = {
		\ 'dir': ['.git', '.svn', '.hg', 'node_modules', '__pycache__'],
        \ 'file': ['*.sw?','~$*','*.bak','*.exe','*.o','*.so','*.py[co]', '*.log']
    \ }
    let g:Lf_UseMemoryCache = 0       " 禁用内存缓存
    "let g:Lf_UseCache = 0            " 禁用磁盘缓存
    let g:Lf_UseVersionControlTool = 1 " 使用版本控制工具检测变化
    noremap <leader>ft :<C-U><C-R>=printf("Leaderf bufTag %s", "")<CR><CR>
    noremap <leader>fm :LeaderfMru<cr>
    noremap <leader>ff :LeaderfFunction!<cr>
    noremap <leader>fb :LeaderfBufTagAll<cr>

    " brew install rg, 模糊搜索
    noremap <C-F> :<C-U><C-R>=printf("Leaderf! rg -e %s ", expand("<cword>"))<CR>
    " search visually selected text literally
    noremap <leader>fn :<C-U><C-R>=printf("Leaderf rg --next")<CR><CR>
    let g:Lf_GtagsAutoGenerate = 1
    let g:Lf_Gtagslabel = 'native-pygments'
    let g:Lf_GtagsSource = 2                 " 同时搜索 GTAGS 和 GRTAGS
    " gtags 精确搜索
    noremap <leader>fu :<C-U><C-R>=printf("Leaderf! gtags --update")<CR><CR>
    noremap <leader>fr :<C-U><C-R>=printf("Leaderf! gtags -r %s --auto-jump", expand("<cword>"))<CR><CR>
    noremap <F1> :<C-U><C-R>=printf("Leaderf! gtags -d %s --auto-jump", expand("<cword>"))<CR><CR>
" }}}



" Add plugins to &runtimepath
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
" markdown-preview {{{
    nmap <C-s> <Plug>MarkdownPreview
    "nmap <M-s> <Plug>MarkdownPreviewStop
    "nmap <C-p> <Plug>MarkdownPreviewToggle
" }}}

Plug 'mzlogin/vim-markdown-toc'
call plug#end()


" ################### 基础 ######################

" ale {{{
if has_key(g:plugs, 'ale')
    let g:ale_linters = {'python': ['flake8'], 'javascript': ['eslint']}
    let g:ale_fixers = {'javascript': ['eslint']}
    let g:ale_fix_on_save = 1
    let g:ale_python_flake8_executable = 'python3'
    let g:ale_python_flake8_options = '-m flake8 --config ~/.flake8'
    "nnoremap <silent> <Leader>ec :ALEToggle<CR>

    " troggle quickfix list
    function! ToggleErrors()
        let old_last_winnr = winnr('$')
        lclose
        if old_last_winnr == winnr('$')
            " Nothing was closed, open syntastic_error location panel
            lopen
        endif
    endfunction
    nnoremap <Leader>s :call ToggleErrors()<cr>
endif

" }}}

" delimitMate {{{
    " for python docstring ",优化输入
    au FileType python let b:delimitMate_nesting_quotes = ['"']
    au FileType php let delimitMate_matchpairs = "(:),[:],{:}"
    " 关闭某些类型文件的自动补全
    "au FileType mail let b:delimitMate_autoclose = 0
" }}}

" rainbow_parentheses {{{
    " 不加入这行, 防止黑色括号出现, 很难识别
    " \ ['black',       'SeaGreen3'],
    let g:rbpt_colorpairs = [
        \ ['brown',       'RoyalBlue3'],
        \ ['Darkblue',    'SeaGreen3'],
        \ ['darkgray',    'DarkOrchid3'],
        \ ['darkgreen',   'firebrick3'],
        \ ['darkcyan',    'RoyalBlue3'],
        \ ['darkred',     'SeaGreen3'],
        \ ['darkmagenta', 'DarkOrchid3'],
        \ ['brown',       'firebrick3'],
        \ ['gray',        'RoyalBlue3'],
        \ ['darkmagenta', 'DarkOrchid3'],
        \ ['Darkblue',    'firebrick3'],
        \ ['darkgreen',   'RoyalBlue3'],
        \ ['darkcyan',    'SeaGreen3'],
        \ ['darkred',     'DarkOrchid3'],
        \ ['red',         'firebrick3'],
        \ ]

    let g:rbpt_max = 16
    let g:rbpt_loadcmd_toggle = 0
    au VimEnter * RainbowParenthesesActivate
    au Syntax * RainbowParenthesesLoadRound
    au Syntax * RainbowParenthesesLoadSquare
    au Syntax * RainbowParenthesesLoadBraces
" }}}


" ################### 显示增强-主题 ###################"

" solarized {{{
    "let g:solarized_termtrans=1
    "let g:solarized_contrast="normal"
    "let g:solarized_visibility="normal"
     let g:solarized_termcolors=256
" }}}
"
" ################### 快速导航 ###################

" nerdtree nerdtreetabs {{{
    let NERDTreeHighlightCursorline=1
    let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
    "close vim if the only window left open is a NERDTree
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
    " s/v 分屏打开文件
    let g:NERDTreeMapOpenSplit = 's'
    let g:NERDTreeMapOpenVSplit = 'v'


    " nerdtreetabs
    map <Leader>n <plug>NERDTreeTabsToggle<CR>
    nmap <F8> :NERDTreeTabsToggle<CR>
    " 关闭同步
    " let g:nerdtree_tabs_synchronize_view=0
    " let g:nerdtree_tabs_synchronize_focus=0
    " 是否自动开启nerdtree
    " thank to @ListenerRi, see https://github.com/wklken/k-vim/issues/165
    let g:nerdtree_tabs_open_on_console_startup=0
    let g:nerdtree_tabs_open_on_gui_startup=0
" }}}


" ################### 语言相关 ###################

" pythonsyntax {{{
    let python_highlight_all = 1
" }}}

" piv {{{
    let g:DisableAutoPHPFolding = 1
" }}}


" vimgo {{{
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_structs = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_build_constraints = 1

    let g:go_fmt_fail_silently = 1
    " format with goimports instead of gofmt
    let g:go_fmt_command = "goimports"
    let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
    let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go', 'java', 'python'] }
" }}}


" json {{{
    let g:vim_json_syntax_conceal = 0
" }}}

" tagbar {{{
    nmap <F9> :TagbarToggle<CR>
    let g:tagbar_autofocus = 1
    let g:tagbar_autoshowtag = 1
    let g:tagbar_show_visibility = 1
" }}}

"------------------------------------------- end of configs --------------------------------------------
